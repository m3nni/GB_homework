#  Задание 3
#  Написать функцию thesaurus(), принимающую в качестве аргументов имена сотрудников
#  и возвращающую словарь, в котором ключи — первые буквы имён, а значения — списки,
#  содержащие имена, начинающиеся с соответствующей буквы.
#
#  Например:
#
#  >>> thesaurus("Иван", "Мария", "Петр", "Илья")
#  {
#      "И": ["Иван", "Илья"],
#      "М": ["Мария"],
#      "П": ["Петр"]
#  }
#  Подумайте:
#
#  полезен ли будет вам оператор распаковки?
#  Как поступить, если потребуется сортировка по ключам?
#  Можно ли использовать словарь в этом случае?
#  ВНИМАНИЕ! Используйте стартовый код для своей реализации
#
#  def thesaurus(*args) -> dict:
#      # пишите свою реализацию здесь
#      dict_out = {}  # результирующий словарь значений
#      return dict_out
#
#
#  print(thesaurus("Иван", "Мария", "Петр", "Илья"))

def thesaurus(*args) -> dict:
    dict_out = {}  # результирующий словарь значений
    for person in args:
        future_key = str(person[0])
        if dict_out.get(future_key) == None:
            dict_out[future_key] = [person]
        else:
            dict_out[future_key] += [person]
    return dict_out


#print(thesaurus("Иван", "Мария", "Петр", "Илья"))
our_dict = thesaurus("Августин", "Иван", "Борис", "Григорий", "Мария", "Петр", "Илья", "Григорий", "Max", "Leonardo", "Михаил", "Сергей", "Семён")
#print(our_dict)

#далее осуществляем сортировку по ключам
our_dict_tuple = sorted(our_dict.items(), key=lambda x: x[0]) # разбиваем словарь на кортежи и сортируем по первому значению (по ключам)
out_dict_sorted = dict(our_dict_tuple) # собираем кортежи обратно в словарь
print(out_dict_sorted)
